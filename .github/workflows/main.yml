name: Flutter CD - APK - WEB

# This workflow is triggered on new tags sent to the repository.

on:
  push:
    # Pattern matched against refs/tags
    tags:        
      - '**'           # Push events to every tag including hierarchical tags like v1.0/beta
    
jobs:
  build:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:
    
    # Setup Java environment in order to build the Android app.
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    
    # Setup the flutter environment.
    - uses: subosito/flutter-action@v1
      with:
        channel: 'stable' # 'dev', 'alpha', default to: 'stable'
        # flutter-version: '1.12.x' # you can also specify exact version of flutter
    
    # Get flutter dependencies.
    - run: flutter pub get
    
    # Build apk.
    - run: flutter build apk

    # Build web
    - run: flutter build web --web-renderer html --base-href "/rpgmap/"

    # Zip generated flutter web files
    - run: zip -r ${{ github.ref_name }}.zip ./build/web

    - name: Retrieve version
      run: |
        echo "::set-output name=GIT_CHANGELOG::$(git log --no-merges --date=iso --pretty=format:"%ad %an: %s" $(git describe --abbrev=0 ${{ github.ref_name }}^)...HEAD)"
      id: gitlog

    # Create Release with tag/branch name (ref_name)
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changelog (Commits)
          ${{ steps.gitlog.outputs.GIT_CHANGELOG }}
        draft: false
        prerelease: false

    # Upload flutter apk built in the release
    - name: Upload Release Apk
      id: upload-release-asset-apk
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: build/app/outputs/apk/release/app-release.apk
        asset_name: ${{ github.ref_name }}.apk
        asset_content_type: application/zip

    # Upload flutter web zip built in the release
    - name: Upload Release Web.zip
      id: upload-release-asset-web
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./${{ github.ref_name }}.zip
        asset_name: ${{ github.ref_name }}.zip
        asset_content_type: application/zip

    # Deploy in github branch
    - name: Deploy Web Github Pages
      uses: peaceiris/actions-gh-pages@v3
      if: true
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/web
